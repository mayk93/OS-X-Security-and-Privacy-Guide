#!/usr/bin/python
# -*- coding: utf-8 -*-

# Unicode
from __future__ import unicode_literals

import sys
reload(sys)
# -----

# Logging
import logging
logging.basicConfig(level=logging.INFO)
# -----


# Libs
import pymongo
import os
import random
import github
# -----


# Constants
LANGUAGES = ["python", "python", "python", "go", "javascript"]  # More python to increase python probability

def get_token():
    client = pymongo.MongoClient()
    return client.tokendb.token.find_one()["token"]

TOKEN = get_token()
USERNAME = "mayk93"   # Here goes your username
REMOTE_PATH = "git@github.com:" + USERNAME + "/"

'''
git remote rename origin upstream
git remote add origin URL_TO_GITHUB_REPO
git push origin master
'''


def choose_repo(result):
    letter = random.choice("abdefjklnquruvwxyz")
    number = random.choice([i for i in range(10, 100)])
    for index, repo in enumerate(result):
        if index > number and letter in repo.clone_url and repo.size < 10000:
            return repo.clone_url, repo.name
    return result[number].clone_url, result[number].name


def get_query():
    return "language:" + random.choice(LANGUAGES)


def clone(url, name):
    logging.info("Cloning " + name + " from " + url)
    os.system("mkdir ClonedRepos/" + name)
    os.system("cd ClonedRepos/" + name + "; git clone " + url)


def create_repo_on_remote(name):
    os.system("""curl -H "Authorization: token %s" --data '{"name":"%s"}' https://api.github.com/user/repos""" % (TOKEN, name))


def change_local_to_remote(name):
    os.system("cd ClonedRepos/" + name + "/" + name + "; git remote rename origin upstream; git remote add origin " + REMOTE_PATH + name + ".git; git push origin master")


def create_file(name):
    go_to_repo = "cd ClonedRepos/" + name + "/" + name + ";"
    create_new_file = " touch daily_commit;"
    edit_new_file = """ echo "This is a daily commit. This file and its contents are generated by a script" > daily_commit;"""
    add_changes = " git add .;"
    commit_changes = """ git commit -m "Daily commit";"""
    push_changes = " git push origin master"
    command = go_to_repo + create_new_file + edit_new_file + add_changes + commit_changes + push_changes
    logging.info("Issuing command: " + command)
    os.system(command)


def main():
    client = github.Github()
    result = client.search_repositories(query=get_query(), sort="stars", order="desc")
    repo_url, repo_name = choose_repo(result)
    clone(repo_url, repo_name)
    create_repo_on_remote(repo_name)
    change_local_to_remote(repo_name)
    create_file(repo_name)

if __name__ == "__main__":
    main()
